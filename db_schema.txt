ðŸ§¾ Swap DB Model
Field	Description
id	Swap ID (Primary Key)
direction	ethâ†’trx or trxâ†’eth
hashlock	H = hash(s) (bytes32)
secret	s (bytes32, nullable until revealed)

-- Dual Addresses (matches current codebase)
user_eth_address	User's Ethereum wallet address (0x...)
user_tron_address	User's TRON wallet address (T...)
resolver_eth_address	Resolver's Ethereum wallet address (0x...)
resolver_tron_address	Resolver's TRON wallet address (T...)
resolver_id	Foreign key to resolvers table

-- Amount Fields (for fee system)
amount	Total amount user pays (user_amount + resolver_fee)
user_amount	Amount user receives (after fee deduction)
resolver_fee	Fee amount for resolver

token_address	Token contract address (address(0) for native ETH/TRX)
status	initiated, eth_locked, trx_locked, both_locked, claimed, refunded

-- Transaction Hashes
eth_lock_tx	Ethereum lock transaction hash
tron_lock_tx	TRON lock transaction hash
eth_claim_tx	Ethereum claim transaction hash (nullable)
tron_claim_tx	TRON claim transaction hash (nullable)
eth_refund_tx	Ethereum refund transaction hash (nullable)
tron_refund_tx	TRON refund transaction hash (nullable)

timelock	Unix timestamp when refund becomes available
created_at	Timestamp when swap was initiated
updated_at	Timestamp when swap was last updated
completed_at	Timestamp when swap was completed (nullable)

ðŸ§  Resolver DB Model
Field	Description
id	Unique ID (Primary Key)
name	Resolver name/identifier
endpoint	Bot API URL (e.g., https://resolver1.com/api)

-- Dual Addresses (matches current codebase)
eth_address	Resolver's Ethereum wallet address (0x...)
tron_address	Resolver's TRON wallet address (T...)

supported_directions	ethâ†’trx, trxâ†’eth (JSON array)
liquidity_eth	Available ETH liquidity amount (VARCHAR for flexibility)
liquidity_trx	Available TRX liquidity amount (VARCHAR for flexibility)
fee_percent	Resolver fee percentage (e.g., 0.001 for 0.1%)
status	active, paused, inactive
created_at	Timestamp when resolver was registered
updated_at	Timestamp when resolver was last updated

ðŸ§  Swap Events DB Model (Optional - for monitoring)
Field	Description
id	Event ID (Primary Key)
swap_id	Foreign key to swap
event_type	HTLCLocked, HTLCClaimed, HTLCRefunded
chain	ethereum, tron
transaction_hash	Transaction hash where event occurred
block_number	Block number where event occurred
event_data	JSON data from event
timestamp	Timestamp when event occurred

ðŸ“‹ Supabase SQL Schema:

-- Swaps Table
CREATE TABLE swaps (
    id SERIAL PRIMARY KEY,
    hashlock VARCHAR(66) UNIQUE NOT NULL,
    direction VARCHAR(10) NOT NULL,
    secret VARCHAR(66),
    
    -- Dual addresses (matches current codebase)
    user_eth_address VARCHAR(42) NOT NULL,
    user_tron_address VARCHAR(34) NOT NULL,
    resolver_eth_address VARCHAR(42) NOT NULL,
    resolver_tron_address VARCHAR(34) NOT NULL,
    resolver_id INTEGER REFERENCES resolvers(id),
    
    -- Amount fields (for fee system)
    amount VARCHAR(50) NOT NULL,
    user_amount VARCHAR(50) NOT NULL,
    resolver_fee VARCHAR(50) NOT NULL,
    
    token_address VARCHAR(42) DEFAULT '0x0000000000000000000000000000000000000000',
    status VARCHAR(20) DEFAULT 'initiated',
    
    -- Transaction hashes
    eth_lock_tx VARCHAR(66),
    tron_lock_tx VARCHAR(66),
    eth_claim_tx VARCHAR(66),
    tron_claim_tx VARCHAR(66),
    eth_refund_tx VARCHAR(66),
    tron_refund_tx VARCHAR(66),
    
    timelock BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    completed_at TIMESTAMP
);

-- Resolvers Table
CREATE TABLE resolvers (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    endpoint VARCHAR(255) NOT NULL,
    
    -- Dual addresses (matches current codebase)
    eth_address VARCHAR(42) NOT NULL,
    tron_address VARCHAR(34) NOT NULL,
    
    supported_directions TEXT[] DEFAULT ARRAY['ethâ†’trx', 'trxâ†’eth'],
    liquidity_eth VARCHAR(50) DEFAULT '0',
    liquidity_trx VARCHAR(50) DEFAULT '0',
    fee_percent DECIMAL(5,4) DEFAULT 0.001,
    status VARCHAR(20) DEFAULT 'active',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Swap Events Table (Optional)
CREATE TABLE swap_events (
    id SERIAL PRIMARY KEY,
    swap_id INTEGER REFERENCES swaps(id),
    event_type VARCHAR(20) NOT NULL,
    chain VARCHAR(10) NOT NULL,
    transaction_hash VARCHAR(66),
    block_number BIGINT,
    event_data JSONB,
    timestamp TIMESTAMP DEFAULT NOW()
);
